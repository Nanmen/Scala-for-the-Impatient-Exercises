***** 第六章练习 *****

/* * * * * * * * * *
1. 编写一个Conversion对象，加入inchesToCentimeters、gallonsToLitters和milesToKilometers方法
 * * * * * * * * * */
object Conversion {
	def inchesToCentimeters(){}
	def gallonsToLitters(){}
	def milesToKilometers(){}
}


/* * * * * * * * * *
2. 前一个练习不是很面向对象。提供一个通用的超类UnitConversion并定义扩展该超类的InchesToCentimeters、GallonsToLitters和MilesToKilometers对象
 * * * * * * * * * */
abstract class UnitConversion{
	def inchesToCentimeters(){}
	def gallonsToLitters(){}
	def milesToKilometers(){}
}

object InchesToCentimeters extends UnitConversion {
	override def inchesToCentimeters(){}
}

object GallonsToLitters extends UnitConversion {
	override def gallonsToLitters(){}
}
object MilesToKilometers extends UnitConversion {
	override def milesToKilometers(){}
}

/* * * * * * * * * *
3. 定义一个扩展自java.awt.Point的Origin对象。为什么说这实际上不是个好主意？（仔细看Point类的方法）
 * * * * * * * * * */
object Origin extends Points with App {
}

/* * * * * * * * * *
4. 定义一个Point类和伴生对象，使得我们可以不用new而直接用Point(3,4)来构造Point实例
 * * * * * * * * * */
class Point(x:Int, y:Int) {
	override def toString:String = "Point:(" + x + "," + y + ")"
}

object Point extends App{
	def apply(x:Int, y:Int) = {
		new Point(x,y)
	}

	val p = Point(1,5)
	println(p)
}


/* * * * * * * * * *
5. 编写一个scala应用程序，使用App特质，以反序打印命令行参数，用空格隔开。举例来说，
scala Reverse Hello World
应该打印出
World Hello
 * * * * * * * * * */
object Reverse extends App {
	println(args.reverse.mkString(" "))
}


/* * * * * * * * * *
6. 编写一个扑克牌四种花色的枚举，让其toString方法分别返回梅花、方块、红桃和黑桃。
 * * * * * * * * * */
object Card extends Enumeration with App{   
	val M = Value("♣")   
	val T = Value("♠")   
	val H = Value("♥")   
	val F = Value("♦")   
	
	println(Card.M)   
	println(Card.T)   
	println(Card.H)   
	println(Card.F)   
}  


/* * * * * * * * * *
7. 实现一个函数，检查某张牌的花色是否为红色。
 * * * * * * * * * */
object Card extends Enumeration with App{   
	val M = Value("♣")   
	val T = Value("♠")   
	val H = Value("♥")   
	val F = Value("♦")   
	
	def checkColor(color:Card.Value) = {
		if(color == Card.H || color == Card.F)  "Red"
		else "Black"
	}

	println(checkColor(Card.M))
	println(checkColor(Card.H))
}


/* * * * * * * * * *
8. 编写一个枚举，描述RGB立方体的8个角。ID使用颜色值(例如，红色是0xff0000)
 * * * * * * * * * */
object RGB extends Enumeration with App {   
	val RED = Value(0xff0000, "Red")   
	val BLACK = Value(0x000000, "Black")   
	val GREEN = Value(0x00ff00, "Green")   
	val CYAN = Value(0x00ffff, "Cyan")   
	val YELLOW = Value(0xffff00, "Yellow")   
	val WHITE = Value(0xffffff, "White")   
	val BLUE = Value(0x0000ff, "Blue")   
	val MAGENTA = Value(0xff00ff, "Magenta")   
} 

