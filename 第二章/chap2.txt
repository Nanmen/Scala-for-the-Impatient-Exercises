***** 第二章练习 *****

/* * * * * * * * * *
1. 一个数字如果为正数，则它的signum为1；如果是负数，则signum为-1； 如果是0， 则signum为0。编写一个函数来计算这个值。
 * * * * * * * * * */
def signum(x : Int) = {
	if (x>0) 1
	else if (x<0) -1
	else 0
}

/* * * * * * * * * *
2. 一个空的表达式{}的值是什么？类型是什么？
 * * * * * * * * * */
scala> val t = {} 
t: Unit = () 

(a). 空表达式的值是 no value
(b). 对应的类型是 Unit (或者说Nothing)

/* * * * * * * * * *
3. 指出在Scala中何种情况下赋值语句 x = y = 1是合法的。
 * * * * * * * * * */
由于y=1，所以，y可以定义为var类型；(y=1)本身是Unit，所以可以定义x为var Unit类型
scala> var x:Unit = ()
x: Unit = ()

scala> var y = 0
y: Int = 0

scala> x = y = 1
x: Unit = ()

/* * * * * * * * * *
4. 针对下列Java循环编写一个Scala版本：
   for(int i = 10; i >= 0; i—-) System.out.println(i);
 * * * * * * * * * */
scala> for(i <- 0 to 10 reverse) println(i)

/* * * * * * * * * *
5. 编写一个过程countdown(n : Int), 打印从n到0的数字
 * * * * * * * * * */
首先几个概念：
过程 - 没有返回值的函数，或者返回值为Unit的函数
函数 - 
方法 - 对象的行为

def countdown(n : Int) {
	for(i <- 0 to n reverse) println(i)
}

另外一种更Scala的写法

def countdown(n : Int) {
	0 to n reverse foreach print
	// 等价于
	// 0.to(n).reverse.foreach(println)
}

/* * * * * * * * * *
6. 编写一个for循环，计算字符串中所有字母的Unicode代码的乘积。举例来说，“Hello”中所有字符的乘积为9415087488L
 * * * * * * * * * */
def unicodeProd(s : String) = {
	var result = 1L
	for(c <- s) result *= c  // 或 c.toLong
	result
}

/* * * * * * * * * *
7. 同样是解决前一个练习的问题，但这次不使用循环。（提示：在Scaladoc中查看StringOps）
 * * * * * * * * * */
def unicodeProd(s : String) = {
	var result = 1L
	s.foreach(result *= _)  // _是通配符，表示传入的元素
	result
}

/* * * * * * * * * *
8. 编写一个函数product(s:String)，计算前面练习中提到的乘积。
 * * * * * * * * * */
将习题6（或7）中的函数名改成product即可。

/* * * * * * * * * *
9. 把前一个联系中的函数改成递归函数。
 * * * * * * * * * */
def product(s:String):Long = {
	if(s.length == 1) s.head
	else s.head * product(s.drop(1))
}

/* * * * * * * * * *
10. 编写函数计算x^n,其中n是整数，使用如下递归定义：
  - x^n=y^2，如果n是正偶数的话，这里的y=x^(n/2)
  - x^n=x*x^(n-1)，如果n是正奇数的话
  - x^0=1
  - x^n=1/x(-n),如果n是负数的话
 * * * * * * * * * */
def myPow(x:Int, n:Int):Double = {
	if(n==0) 1
	else if(n>0 && n%2==0) myPow(x,n/2) * myPow(x,n/2)
	else if(n>0 && n%2==1) x*myPow(x,n-1)
	else 1/myPow(x,-n)
}